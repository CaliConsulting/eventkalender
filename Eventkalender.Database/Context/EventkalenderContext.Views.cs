//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Eventkalender.Database.EventkalenderContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets6cdb3589969275828148c9b4d67aaa0e279d7cedfa9c9f91dcdd599025822357))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets6cdb3589969275828148c9b4d67aaa0e279d7cedfa9c9f91dcdd599025822357 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "6cdb3589969275828148c9b4d67aaa0e279d7cedfa9c9f91dcdd599025822357"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Event")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Nation")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Person")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.PersonEvent")
            {
                return GetView3();
            }

            if (extentName == "EventkalenderContext.Event")
            {
                return GetView4();
            }

            if (extentName == "EventkalenderContext.Nation")
            {
                return GetView5();
            }

            if (extentName == "EventkalenderContext.Person")
            {
                return GetView6();
            }

            if (extentName == "EventkalenderContext.Person_Events")
            {
                return GetView7();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Event.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Event
        [CodeFirstDatabaseSchema.Event](T1.Event_Id, T1.Event_Name, T1.Event_Summary, T1.Event_StartTime, T1.Event_EndTime, T1.Event_NationId)
    FROM (
        SELECT 
            T.Id AS Event_Id, 
            T.Name AS Event_Name, 
            T.Summary AS Event_Summary, 
            T.StartTime AS Event_StartTime, 
            T.EndTime AS Event_EndTime, 
            T.NationId AS Event_NationId, 
            True AS _from0
        FROM EventkalenderContext.Event AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Nation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nation
        [CodeFirstDatabaseSchema.Nation](T1.Nation_Id, T1.Nation_Name)
    FROM (
        SELECT 
            T.Id AS Nation_Id, 
            T.Name AS Nation_Name, 
            True AS _from0
        FROM EventkalenderContext.Nation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_Id, T1.Person_FirstName, T1.Person_LastName)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.FirstName AS Person_FirstName, 
            T.LastName AS Person_LastName, 
            True AS _from0
        FROM EventkalenderContext.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PersonEvent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonEvent
        [CodeFirstDatabaseSchema.PersonEvent](T1.PersonEvent_PersonId, T1.PersonEvent_EventId)
    FROM (
        SELECT 
            Key(T.Person_Events_Source).Id AS PersonEvent_PersonId, 
            Key(T.Person_Events_Target).Id AS PersonEvent_EventId, 
            True AS _from0
        FROM EventkalenderContext.Person_Events AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EventkalenderContext.Event.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Event
        [Eventkalender.Database.Event](T1.Event_Id, T1.Event_Name, T1.Event_Summary, T1.Event_StartTime, T1.Event_EndTime, T1.Event_NationId)
    FROM (
        SELECT 
            T.Id AS Event_Id, 
            T.Name AS Event_Name, 
            T.Summary AS Event_Summary, 
            T.StartTime AS Event_StartTime, 
            T.EndTime AS Event_EndTime, 
            T.NationId AS Event_NationId, 
            True AS _from0
        FROM CodeFirstDatabase.Event AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EventkalenderContext.Nation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nation
        [Eventkalender.Database.Nation](T1.Nation_Id, T1.Nation_Name)
    FROM (
        SELECT 
            T.Id AS Nation_Id, 
            T.Name AS Nation_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Nation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EventkalenderContext.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [Eventkalender.Database.Person](T1.Person_Id, T1.Person_FirstName, T1.Person_LastName)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.FirstName AS Person_FirstName, 
            T.LastName AS Person_LastName, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EventkalenderContext.Person_Events.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person_Events
        [Eventkalender.Database.Person_Events](T3.[Person_Events.Person_Events_Source], T3.[Person_Events.Person_Events_Target])
    FROM (
        SELECT -- Constructing Person_Events_Source
            CreateRef(EventkalenderContext.Person, row(T2.[Person_Events.Person_Events_Source.Id]), [Eventkalender.Database.Person]) AS [Person_Events.Person_Events_Source], 
            T2.[Person_Events.Person_Events_Target]
        FROM (
            SELECT -- Constructing Person_Events_Target
                T1.[Person_Events.Person_Events_Source.Id], 
                CreateRef(EventkalenderContext.Event, row(T1.[Person_Events.Person_Events_Target.Id]), [Eventkalender.Database.Event]) AS [Person_Events.Person_Events_Target]
            FROM (
                SELECT 
                    T.PersonId AS [Person_Events.Person_Events_Source.Id], 
                    T.EventId AS [Person_Events.Person_Events_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.PersonEvent AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
